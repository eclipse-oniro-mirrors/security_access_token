# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../access_token.gni")

accesstoken_manager_service_source = [
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/callback/callback_manager.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/callback/callback_death_recipients.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/callback/accesstoken_callback_proxys.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/database/access_token_db_util.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/database/access_token_db.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/database/access_token_open_callback.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/database/data_translator.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/database/token_field_const.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/dfx/hisysevent_adapter.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/form_manager/form_instance.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/form_manager/form_manager_access_client.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/form_manager/form_manager_access_proxy.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/form_manager/form_manager_death_recipient.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/form_manager/form_status_change_callback.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/permission/permission_definition_cache.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/permission/permission_grant_event.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/permission/permission_manager.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/permission/permission_policy_set.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/permission/short_grant_manager.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/permission/permission_validator.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/permission/permission_definition_parser.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/permission/temp_permission_observer.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/service/accesstoken_manager_service.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/service/accesstoken_manager_stub.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/token/accesstoken_id_manager.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/token/accesstoken_info_manager.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/token/hap_token_info_inner.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/token/native_token_info_inner.cpp",
  "${access_token_path}/services/accesstokenmanager/main/cpp/src/token/native_token_receptor.cpp",
]

ohos_unittest("libaccesstoken_manager_service_standard_test") {
  subsystem_name = "security"
  part_name = "access_token"
  module_out_path = part_name + "/" + part_name
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${access_token_path}/cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"

  include_dirs = [
    "${access_token_path}/frameworks/accesstoken/include",
    "${access_token_path}/frameworks/tokensync/include",
    "${access_token_path}/frameworks/common/include",
    "${access_token_path}/interfaces/innerkits/accesstoken/include",
    "${access_token_path}/interfaces/innerkits/token_setproc/include",
    "${access_token_path}/interfaces/innerkits/accesstoken/main/cpp/include",
    "${access_token_path}/interfaces/innerkits/accesstoken/src",
    "${access_token_path}/interfaces/innerkits/nativetoken/include",
    "${access_token_path}/services/common/app_manager/include",
    "${access_token_path}/services/common/config_policy/include",
    "${access_token_path}/services/common/database/include",
    "${access_token_path}/services/common/handler/include",
    "${access_token_path}/services/common/libraryloader/include",
    "${access_token_path}/services/common/utils/include",
    "${access_token_path}/services/accesstokenmanager/main/cpp/include/callback",
    "${access_token_path}/services/accesstokenmanager/main/cpp/include/database",
    "${access_token_path}/services/accesstokenmanager/main/cpp/include/device",
    "${access_token_path}/services/accesstokenmanager/main/cpp/include/dfx",
    "${access_token_path}/services/accesstokenmanager/main/cpp/include/form_manager",
    "${access_token_path}/services/accesstokenmanager/main/cpp/include/permission",
    "${access_token_path}/services/accesstokenmanager/main/cpp/include/service",
    "${access_token_path}/services/accesstokenmanager/main/cpp/include/token",
  ]

  sources = [
    "accesstoken_database_test.cpp",
    "accesstoken_info_manager_test.cpp",
    "multi_thread_test.cpp",
    "native_token_receptor_test.cpp",
    "permission_definition_parser_test.cpp",
    "permission_grant_event_test.cpp",
    "permission_manager_test.cpp",
    "short_grant_manager_test.cpp",
  ]

  sources += accesstoken_manager_service_source

  cflags_cc = [ "-DHILOG_ENABLE" ]

  if (dlp_permission_enable == true) {
    cflags_cc += [ "-DSUPPORT_SANDBOX_APP" ]
    sources += [
      "${access_token_path}/services/accesstokenmanager/main/cpp/src/permission/dlp_permission_set_manager.cpp",
      "${access_token_path}/services/accesstokenmanager/main/cpp/src/permission/dlp_permission_set_parser.cpp",
    ]
  }

  configs = [ "${access_token_path}/config:coverage_flags" ]

  deps = [
    "${access_token_path}/frameworks/accesstoken:accesstoken_communication_adapter_cxx",
    "${access_token_path}/frameworks/common:accesstoken_common_cxx",
    "${access_token_path}/frameworks/inner_api/privacy:libprivacy_sdk",
    "${access_token_path}/interfaces/innerkits/accesstoken:libaccesstoken_sdk",
    "${access_token_path}/interfaces/innerkits/accesstoken:libtokenid_sdk",
    "${access_token_path}/interfaces/innerkits/nativetoken:libnativetoken_shared",
    "${access_token_path}/interfaces/innerkits/token_setproc:libperm_setproc",
    "${access_token_path}/interfaces/innerkits/token_setproc:libtokensetproc_shared",
    "${access_token_path}/services/common:accesstoken_service_common",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (token_sync_enable == true) {
    cflags_cc += [ "-DTOKEN_SYNC_ENABLE" ]
    sources += [
      "${access_token_path}/services/accesstokenmanager/main/cpp/src/token/accesstoken_remote_token_manager.cpp",
      "${access_token_path}/services/accesstokenmanager/main/cpp/src/token/token_modify_notifier.cpp",
    ]
    include_dirs += [
      "${access_token_path}/interfaces/inner_api/tokensync/include",
      "${access_token_path}/frameworks/inner_api/tokensync/src",
    ]
    external_deps += [ "device_manager:devicemanagersdk" ]
  }
  if (eventhandler_enable == true) {
    cflags_cc += [ "-DEVENTHANDLER_ENABLE" ]
    external_deps += [ "eventhandler:libeventhandler" ]
  }
  if (access_token_background_task_mgr_continuous_task_enable == true) {
    cflags_cc += [ "-DBGTASKMGR_CONTINUOUS_TASK_ENABLE" ]
    include_dirs += [
      "${access_token_path}/services/common/background_task_manager/include",
    ]
    sources += [
      "${access_token_path}/services/common/background_task_manager/src/background_task_manager_access_client.cpp",
      "${access_token_path}/services/common/background_task_manager/src/background_task_manager_access_proxy.cpp",
      "${access_token_path}/services/common/background_task_manager/src/background_task_manager_death_recipient.cpp",
      "${access_token_path}/services/common/background_task_manager/src/continuous_task_callback_info.cpp",
      "${access_token_path}/services/common/background_task_manager/src/continuous_task_change_callback.cpp",
    ]
  }
}
