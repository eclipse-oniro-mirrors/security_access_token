# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../../access_token.gni")

ohos_unittest("libaccesstoken_sdk_test") {
  subsystem_name = "security"
  part_name = "access_token"
  module_out_path = part_name + "/" + part_name
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  include_dirs = [
    "${access_token_path}/frameworks/accesstoken/include",
    "${access_token_path}/frameworks/common/include",
    "${access_token_path}/frameworks/tokensync/include",
    "${access_token_innerkit_path}/include",
    "${access_token_innerkit_path}/src",
    "common",
    "${access_token_path}/interfaces/innerkits/nativetoken/include",
    "${access_token_path}/interfaces/innerkits/token_setproc/include",
  ]

  sources = [
    "Coverage/accesstoken_kit_coverage_test.cpp",
    "DistributedTest/alloc_local_token_id_test.cpp",
    "DistributedTest/delete_remote_device_tokens_test.cpp",
    "DistributedTest/delete_remote_token_test.cpp",
    "DistributedTest/get_hap_token_info_from_remote_test.cpp",
    "DistributedTest/get_remote_native_tokenid_test.cpp",
    "DistributedTest/register_token_sync_callback_test.cpp",
    "DistributedTest/set_remote_hap_token_info_test.cpp",
    "EdmPolicyTest/edm_policy_set_test.cpp",
    "HapAttributeTest/get_hap_dlp_flag_test.cpp",
    "HapAttributeTest/get_permission_flag_test.cpp",
    "HapAttributeTest/get_permissions_status_test.cpp",
    "HapAttributeTest/permission_request_toggle_status_test.cpp",
    "HapTokenTest/alloc_hap_token_test.cpp",
    "HapTokenTest/app_installation_optimized_test.cpp",
    "HapTokenTest/delete_token_test.cpp",
    "HapTokenTest/get_hap_token_test.cpp",
    "HapTokenTest/get_token_type_test.cpp",
    "HapTokenTest/init_hap_token_test.cpp",
    "HapTokenTest/update_hap_token_test.cpp",
    "PermDenyTest/accesstoken_deny_test.cpp",
    "PermisionDialogTest/accesstoken_location_request_test.cpp",
    "PermisionDialogTest/get_self_permission_state_test.cpp",
    "PermisionDialogTest/request_permission_on_setting_test.cpp",
    "PermisionDialogTest/set_perm_dialog_cap_test.cpp",
    "PermissionsTest/check_permission_map_test.cpp",
    "PermissionsTest/clear_user_granted__permission_state_test.cpp",
    "PermissionsTest/get_permission_test.cpp",
    "PermissionsTest/grant_permission_for_specified_time_test.cpp",
    "PermissionsTest/grant_permission_test.cpp",
    "PermissionsTest/revoke_permission_test.cpp",
    "PermissionsTest/verify_access_token_test.cpp",
    "RegisterCallbackTest/register_perm_state_change_callback_test.cpp",
    "RegisterCallbackTest/un_register_perm_state_change_callback_test.cpp",
    "SaTest/dump_token_info_test.cpp",
    "SaTest/get_native_token_id_test.cpp",
    "SaTest/get_native_token_info_test.cpp",
    "SaTest/get_version_test.cpp",
    "SecurityComponentTest/security_component_grant_test.cpp",
    "common/test_common.cpp",
  ]

  cflags_cc = [ "-DHILOG_ENABLE" ]

  configs = [ "${access_token_path}/config:coverage_flags" ]

  deps = [
    "${access_token_path}/frameworks/accesstoken:accesstoken_communication_adapter_cxx",
    "${access_token_path}/frameworks/common:accesstoken_common_cxx",
    "${access_token_path}/interfaces/innerkits/accesstoken:libaccesstoken_sdk",
    "${access_token_path}/interfaces/innerkits/accesstoken:libtokenid_sdk",
    "${access_token_path}/interfaces/innerkits/nativetoken:libnativetoken_shared",
    "${access_token_path}/interfaces/innerkits/token_setproc:libperm_setproc",
    "${access_token_path}/interfaces/innerkits/token_setproc:libtokensetproc_shared",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]
  if (token_sync_enable == true) {
    cflags_cc += [ "-DTOKEN_SYNC_ENABLE" ]
    external_deps += [
      "device_manager:devicemanagersdk",
      "json:nlohmann_json_static",
    ]
  }
  if (dlp_permission_enable == true) {
    cflags_cc += [ "-DSUPPORT_SANDBOX_APP" ]
    sources += [
      "DlpTest/clone_app_permission_test.cpp",
      "DlpTest/share_permission_with_sandbox_test.cpp",
    ]
  }
}

ohos_unittest("accesstoken_mock_test") {
  subsystem_name = "security"
  part_name = "access_token"
  module_out_path = part_name + "/" + part_name
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  include_dirs = [
    "${access_token_path}/frameworks/common/include",
    "${access_token_path}/frameworks/accesstoken/include",
    "${access_token_path}/frameworks/tokensync/include",
    "${access_token_path}/interfaces/innerkits/nativetoken/include",
    "${access_token_path}/interfaces/innerkits/token_setproc/include",
    "${access_token_innerkit_path}/include",
    "${access_token_innerkit_path}/src",
  ]

  sources = [
    "${access_token_innerkit_path}/src/accesstoken_callback_stubs.cpp",
    "${access_token_innerkit_path}/src/accesstoken_callbacks.cpp",
    "${access_token_innerkit_path}/src/accesstoken_death_recipient.cpp",
    "${access_token_innerkit_path}/src/accesstoken_kit.cpp",
    "${access_token_innerkit_path}/src/accesstoken_manager_client.cpp",
    "${access_token_innerkit_path}/src/accesstoken_manager_proxy.cpp",
    "${access_token_innerkit_path}/src/perm_state_change_callback_customize.cpp",
    "../mock/src/iservice_registry.cpp",
    "ProxyMockTest/accesstoken_mock_test.cpp",
  ]

  cflags_cc = [ "-DHILOG_ENABLE" ]
  configs = [ "${access_token_path}/config:coverage_flags" ]

  deps = [
    "${access_token_path}/frameworks/accesstoken:accesstoken_communication_adapter_cxx",
    "${access_token_path}/frameworks/common:accesstoken_common_cxx",
    "${access_token_path}/interfaces/innerkits/accesstoken:libtokenid_sdk",
    "${access_token_path}/interfaces/innerkits/token_setproc:libperm_setproc",
    "${access_token_path}/interfaces/innerkits/token_setproc:libtokensetproc_shared",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_single",
    "ipc:libdbinder",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  if (eventhandler_enable == true) {
    cflags_cc += [ "-DEVENTHANDLER_ENABLE" ]
    external_deps += [ "eventhandler:libeventhandler" ]
  }
  if (token_sync_enable == true) {
    cflags_cc += [ "-DTOKEN_SYNC_ENABLE" ]
  }
}
