# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

config("accesstokenlib") {
  visibility = [ ":*" ]
  include_dirs = [ "include" ]
}

if (is_standard_system) {
  ohos_static_library("libnativetoken") {
    subsystem_name = "security"
    part_name = "access_token"
    output_name = "libnativetoken"
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
    }
    branch_protector_ret = "pac_ret"

    public_configs = [ ":accesstokenlib" ]

    cflags = [ "-Wall" ]

    include_dirs = [ "src" ]

    sources = [
      "src/nativetoken.c",
      "src/nativetoken_json_oper.c",
      "src/nativetoken_klog.c",
    ]

    external_deps = [
      "bounds_checking_function:libsec_shared",
      "cJSON:cjson_static",
      "hilog:libhilog",
    ]

    if (build_selinux) {
      external_deps += [ "selinux_adapter:librestorecon" ]
      cflags += [ "-DWITH_SELINUX" ]
    }
  }

  ohos_shared_library("libnativetoken_shared") {
    subsystem_name = "security"
    part_name = "access_token"
    output_name = "libnativetoken_shared"
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
    }
    branch_protector_ret = "pac_ret"
    innerapi_tags = [ "platformsdk" ]
    public_configs = [ ":accesstokenlib" ]

    cflags = [ "-Wall" ]

    include_dirs = [ "src" ]

    sources = [
      "src/nativetoken.c",
      "src/nativetoken_json_oper.c",
      "src/nativetoken_klog.c",
    ]

    external_deps = [
      "bounds_checking_function:libsec_shared",
      "cJSON:cjson_static",
      "hilog:libhilog",
    ]

    if (build_selinux) {
      external_deps += [ "selinux_adapter:librestorecon" ]
      cflags += [ "-DWITH_SELINUX" ]
    }
  }
}
